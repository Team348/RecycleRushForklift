// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
Encoder* RobotMap::elevatorElevatorEncoder = NULL;
SpeedController* RobotMap::elevatorElevatorMotor1 = NULL;
SpeedController* RobotMap::elevatorElevatorMotor2 = NULL;
DigitalInput* RobotMap::elevatorElevatorBottomLimitSwitch = NULL;
DigitalInput* RobotMap::elevatorElevatorTopLimitSwitch = NULL;
Encoder* RobotMap::gripperGripperEncoder = NULL;
SpeedController* RobotMap::gripperGripperMotor = NULL;
SpeedController* RobotMap::drivePlatformDriveMotorLeftFront = NULL;
SpeedController* RobotMap::drivePlatformDriveMotorRightFront = NULL;
SpeedController* RobotMap::drivePlatformDriveMotorLeftRear = NULL;
SpeedController* RobotMap::drivePlatformDriveMotorRightRear = NULL;
RobotDrive* RobotMap::drivePlatformMecanumDrive = NULL;
AnalogInput* RobotMap::drivePlatformUltrasonicRangeSensorForward = NULL;
SpeedController* RobotMap::vacuumVacuumPumpMotor = NULL;
AnalogInput* RobotMap::vacuumVacuumSensor = NULL;
Servo* RobotMap::vacuumVacuumJawValveServo = NULL;
Servo* RobotMap::vacuumVacuumArmValveServo = NULL;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	elevatorElevatorEncoder = new Encoder(0, 1, false, Encoder::k4X);
	lw->AddSensor("Elevator", "ElevatorEncoder", elevatorElevatorEncoder);
	elevatorElevatorEncoder->SetDistancePerPulse(0.005);
        elevatorElevatorEncoder->SetPIDSourceParameter(Encoder::kDistance);
	elevatorElevatorMotor1 = new Talon(0);
	lw->AddActuator("Elevator", "ElevatorMotor1", (Talon*) elevatorElevatorMotor1);
	
	elevatorElevatorMotor2 = new Talon(1);
	lw->AddActuator("Elevator", "ElevatorMotor2", (Talon*) elevatorElevatorMotor2);
	
	elevatorElevatorBottomLimitSwitch = new DigitalInput(4);
	lw->AddSensor("Elevator", "ElevatorBottomLimitSwitch", elevatorElevatorBottomLimitSwitch);
	
	elevatorElevatorTopLimitSwitch = new DigitalInput(5);
	lw->AddSensor("Elevator", "ElevatorTopLimitSwitch", elevatorElevatorTopLimitSwitch);
	
	gripperGripperEncoder = new Encoder(2, 3, false, Encoder::k4X);
	lw->AddSensor("Gripper", "GripperEncoder", gripperGripperEncoder);
	gripperGripperEncoder->SetDistancePerPulse(0.005);
        gripperGripperEncoder->SetPIDSourceParameter(Encoder::kDistance);
	gripperGripperMotor = new Talon(2);
	lw->AddActuator("Gripper", "GripperMotor", (Talon*) gripperGripperMotor);
	
	drivePlatformDriveMotorLeftFront = new TalonSRX(3);
	lw->AddActuator("DrivePlatform", "DriveMotorLeftFront", (TalonSRX*) drivePlatformDriveMotorLeftFront);
	
	drivePlatformDriveMotorRightFront = new TalonSRX(4);
	lw->AddActuator("DrivePlatform", "DriveMotorRightFront", (TalonSRX*) drivePlatformDriveMotorRightFront);
	
	drivePlatformDriveMotorLeftRear = new TalonSRX(5);
	lw->AddActuator("DrivePlatform", "DriveMotorLeftRear", (TalonSRX*) drivePlatformDriveMotorLeftRear);
	
	drivePlatformDriveMotorRightRear = new TalonSRX(6);
	lw->AddActuator("DrivePlatform", "DriveMotorRightRear", (TalonSRX*) drivePlatformDriveMotorRightRear);
	
	drivePlatformMecanumDrive = new RobotDrive(drivePlatformDriveMotorLeftFront, drivePlatformDriveMotorLeftRear,
              drivePlatformDriveMotorRightFront, drivePlatformDriveMotorRightRear);
	
	drivePlatformMecanumDrive->SetSafetyEnabled(true);
        drivePlatformMecanumDrive->SetExpiration(0.1);
        drivePlatformMecanumDrive->SetSensitivity(0.5);
        drivePlatformMecanumDrive->SetMaxOutput(1.0);

	drivePlatformUltrasonicRangeSensorForward = new AnalogInput(1);
	lw->AddSensor("DrivePlatform", "UltrasonicRangeSensorForward", drivePlatformUltrasonicRangeSensorForward);
	
	vacuumVacuumPumpMotor = new Talon(7);
	lw->AddActuator("Vacuum", "VacuumPumpMotor", (Talon*) vacuumVacuumPumpMotor);
	
	vacuumVacuumSensor = new AnalogInput(0);
	lw->AddSensor("Vacuum", "VacuumSensor", vacuumVacuumSensor);
	
	vacuumVacuumJawValveServo = new Servo(8);
	lw->AddActuator("Vacuum", "VacuumJawValveServo", vacuumVacuumJawValveServo);
	
	vacuumVacuumArmValveServo = new Servo(9);
	lw->AddActuator("Vacuum", "VacuumArmValveServo", vacuumVacuumArmValveServo);
	

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
