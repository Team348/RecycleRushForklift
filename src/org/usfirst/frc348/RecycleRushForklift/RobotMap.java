// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc348.RecycleRushForklift;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder elevatorElevatorEncoder;
    public static SpeedController elevatorElevatorMotor1;
    public static SpeedController elevatorElevatorMotor2;
    public static DigitalInput elevatorElevatorBottomLimitSwitch;
    public static DigitalInput elevatorElevatorTopLimitSwitch;
    public static Encoder gripperGripperEncoder;
    public static SpeedController gripperGripperMotor;
    public static DigitalInput gripperGripperOpenLimitSwitch;
    public static DigitalInput gripperGripperClosedLimitSwitch;
    public static AnalogInput drivePlatformUltrasonicRangeSensorForward;
    public static DigitalInput drivePlatformTotePositionSensorLeft;
    public static DigitalInput drivePlatformTotePositionSensorRight;
    public static SpeedController vacuumVacuumPumpMotor;
    public static AnalogInput vacuumVacuumSensor;
    public static Servo vacuumVacuumJawValveServo;
    public static Servo vacuumVacuumArmValveServo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static CANTalon driveMotorFrontLeft;
    public static CANTalon driveMotorFrontRight;
    public static CANTalon driveMotorBackLeft;
    public static CANTalon driveMotorBackRight;
    
    public static RobotDrive driveSystem;

    public static Preferences prefs;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        elevatorElevatorEncoder = new Encoder(0, 1, true, EncodingType.k4X);
        LiveWindow.addSensor("Elevator", "ElevatorEncoder", elevatorElevatorEncoder);
        elevatorElevatorEncoder.setDistancePerPulse(0.0082677);
        elevatorElevatorEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        elevatorElevatorMotor1 = new Talon(1);
        LiveWindow.addActuator("Elevator", "ElevatorMotor1", (Talon) elevatorElevatorMotor1);
        
        elevatorElevatorMotor2 = new Talon(2);
        LiveWindow.addActuator("Elevator", "ElevatorMotor2", (Talon) elevatorElevatorMotor2);
        
        elevatorElevatorBottomLimitSwitch = new DigitalInput(5);
        LiveWindow.addSensor("Elevator", "ElevatorBottomLimitSwitch", elevatorElevatorBottomLimitSwitch);
        
        elevatorElevatorTopLimitSwitch = new DigitalInput(4);
        LiveWindow.addSensor("Elevator", "ElevatorTopLimitSwitch", elevatorElevatorTopLimitSwitch);
        
        gripperGripperEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Gripper", "GripperEncoder", gripperGripperEncoder);
        gripperGripperEncoder.setDistancePerPulse(0.0082677);
        gripperGripperEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        gripperGripperMotor = new Talon(3);
        LiveWindow.addActuator("Gripper", "GripperMotor", (Talon) gripperGripperMotor);
        
        gripperGripperOpenLimitSwitch = new DigitalInput(6);
        LiveWindow.addSensor("Gripper", "GripperOpenLimitSwitch", gripperGripperOpenLimitSwitch);
        
        gripperGripperClosedLimitSwitch = new DigitalInput(7);
        LiveWindow.addSensor("Gripper", "GripperClosedLimitSwitch", gripperGripperClosedLimitSwitch);
        
        drivePlatformUltrasonicRangeSensorForward = new AnalogInput(1);
        LiveWindow.addSensor("DrivePlatform", "UltrasonicRangeSensorForward", drivePlatformUltrasonicRangeSensorForward);
        
        drivePlatformTotePositionSensorLeft = new DigitalInput(8);
        LiveWindow.addSensor("DrivePlatform", "TotePositionSensorLeft", drivePlatformTotePositionSensorLeft);
        
        drivePlatformTotePositionSensorRight = new DigitalInput(9);
        LiveWindow.addSensor("DrivePlatform", "TotePositionSensorRight", drivePlatformTotePositionSensorRight);
        
        vacuumVacuumPumpMotor = new Talon(0);
        LiveWindow.addActuator("Vacuum", "VacuumPumpMotor", (Talon) vacuumVacuumPumpMotor);
        
        vacuumVacuumSensor = new AnalogInput(0);
        LiveWindow.addSensor("Vacuum", "VacuumSensor", vacuumVacuumSensor);
        
        vacuumVacuumJawValveServo = new Servo(4);
        LiveWindow.addActuator("Vacuum", "VacuumJawValveServo", vacuumVacuumJawValveServo);
        
        vacuumVacuumArmValveServo = new Servo(5);
        LiveWindow.addActuator("Vacuum", "VacuumArmValveServo", vacuumVacuumArmValveServo);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        driveMotorFrontLeft = new CANTalon(1);
        driveMotorFrontRight = new CANTalon(2);
        driveMotorBackLeft = new CANTalon(3);
        driveMotorBackRight = new CANTalon(4);
        
        driveSystem = new RobotDrive(driveMotorFrontLeft, driveMotorBackLeft, driveMotorFrontRight, driveMotorBackRight);
        
        prefs = Preferences.getInstance();
    }
}
