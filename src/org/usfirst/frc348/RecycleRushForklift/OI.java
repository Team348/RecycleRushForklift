// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc348.RecycleRushForklift;

import org.usfirst.frc348.RecycleRushForklift.commands.*;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton closeGripperButton;
    public JoystickButton openGripperButton;
    public JoystickButton openGripperButtonB;
    public Joystick pilotLeftJoystick;
    public JoystickButton grabPartButton;
    public JoystickButton dropPartButton;
    public Joystick pilotRightJoystick;
    public JoystickButton homeButton;
    public JoystickButton setForkValveButton;
    public JoystickButton setFrontValveButton;
    public Joystick copilotJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        copilotJoystick = new Joystick(0);
        
        setFrontValveButton = new JoystickButton(copilotJoystick, 4);
        setFrontValveButton.whileHeld(new SetFrontVacuumCommand());
        setForkValveButton = new JoystickButton(copilotJoystick, 6);
        setForkValveButton.whileHeld(new SetForkModeVacuumComand());
        homeButton = new JoystickButton(copilotJoystick, 8);
        homeButton.whenPressed(new HomeElevatorCommand());
        pilotRightJoystick = new Joystick(1);
        
        dropPartButton = new JoystickButton(pilotRightJoystick, 2);
        dropPartButton.whenPressed(new DropPartCommand());
        grabPartButton = new JoystickButton(pilotRightJoystick, 1);
        grabPartButton.whenPressed(new GrabPartCommand());
        pilotLeftJoystick = new Joystick(2);
        
        openGripperButtonB = new JoystickButton(pilotLeftJoystick, 4);
        openGripperButtonB.whenPressed(new OpenGripperCommand());
        openGripperButton = new JoystickButton(pilotLeftJoystick, 3);
        openGripperButton.whenPressed(new OpenGripperCommand());
        closeGripperButton = new JoystickButton(pilotLeftJoystick, 1);
        closeGripperButton.whileHeld(new CloseGripperCommand());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("HomeElevatorCommand", new HomeElevatorCommand());

        SmartDashboard.putData("DropPartCommand", new DropPartCommand());

        SmartDashboard.putData("GrabPartCommand", new GrabPartCommand());

        SmartDashboard.putData("OpenGripperCommand", new OpenGripperCommand());

        SmartDashboard.putData("CloseGripperCommand", new CloseGripperCommand());

        SmartDashboard.putData("StopGripperCommand", new StopGripperCommand());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getPilotLeftJoystick() {
        return pilotLeftJoystick;
    }

    public Joystick getPilotRightJoystick() {
        return pilotRightJoystick;
    }

    public Joystick getCopilotJoystick() {
        return copilotJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

